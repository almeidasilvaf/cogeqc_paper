{
  "hash": "eb38a2def3fc861da3e02c2218a22e68",
  "result": {
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Assessing synteny detection in Fabaceae\n\n\nHere, we will assess synteny detection using a network-based approach. \nThe anchor pairs from synteny identification will be interpreted as edges of \nan unweighted undirected graph (i.e., a synteny network), and the best \nsynteny detection will be identified based on the graphs' clustering \ncoefficients and node number. \n\nWe will demonstrate our network-based synteny assessment using genomic data on\nFabaceae species available on PLAZA 5.0 [@van2022plaza].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cogeqc)\nlibrary(here)\nlibrary(tidyverse)\nlibrary(syntenet)\nlibrary(tidytext)\n```\n:::\n\n\n\n## Data acquisition\n\nIn this section, we will download whole-genome protein sequences and \ngene annotation from PLAZA 5.0, and then we will preprocess the data with\n`syntenet::process_input()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies <- c(\"mtr\", \"tpr\", \"psa\", \"car\", \"lja\", \"gma\", \"vmu\", \"lal\", \"arhy\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_url <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/\"\n\n# Get proteomes\nseq_url <- paste0(\n    base_url, \"Fasta/proteome.selected_transcript.\", \n    species, \".fasta.gz\"\n)\n\n## Import files and clean gene IDs\nseq <- lapply(seq_url, function(x) {\n    s <- Biostrings::readAAStringSet(x)\n    names(s) <- gsub(\".* | \", \"\", names(s))\n    return(s)\n})\nnames(seq) <- species\n\n\n# Get gene annotation\nannot_url <- paste0(\n    base_url, \"GFF/\", species, \"/annotation.selected_transcript.exon_features.\",\n    species, \".gff3.gz\"\n)\n\n## Import files and keep only relevant fields\nannot <- lapply(annot_url, function(x) {\n    a <- rtracklayer::import(x)\n    a <- a[, c(\"type\", \"gene_id\")]\n    a <- a[a$type == \"gene\"]\n    return(a)\n})\nnames(annot) <- species\n\n# Process data\npdata <- process_input(seq, annot)\n\n# Remove unprocessed data to clean the working environment\nrm(annot)\nrm(seq)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Network-based synteny assessment\n\nWe will infer synteny networks using the Bioconductor package \n*[syntenet](https://bioconductor.org/packages/3.17/syntenet)*. This package detects synteny\nusing the MCScanX algorithm [@wang2012mcscanx], which can produce different\nresults based on 2 main parameters:\n\n1. **anchors:** minimum required number of genes to call a syntenic block. \nDefault: 5.\n2. **max_gaps:** number of upstream and downstream genes to search for anchors.\nDefault: 25.\n\nWe will infer synteny networks with 5 combinations of parameters, similarly\nto @zhao2019network, using two approaches:\n\n1. A single Fabaceae synteny network;\n2. Species-specific synteny networks for each Fabaceae species.\n\nTo start with, let's define the combinations of parameters\nwe will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define combinations of parameters: anchors (a), max_gaps (m)\nsynteny_params <- list(\n    c(3, 25),\n    c(5, 15),\n    c(5, 25),\n    c(5, 35),\n    c(7, 25)\n)\n```\n:::\n\n\n### Assessing the Fabaceae synteny network\n\nFirst, we will perform similarity searches with DIAMOND.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define wrapper function to run DIAMOND with different top_hits\nout <- file.path(tempdir(), \"diamond_all\")\nd5 <- run_diamond(seq = seq, top_hits = 5, outdir = out)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWith the DIAMOND list, we can detect synteny.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to detect synteny with multiple combinations of params\nsynteny_wrapper <- function(diamond, annotation, params) {\n    \n    syn <- lapply(params, function(x) {\n        \n        anchors <- x[1]\n        max_gaps <- x[2]\n        outdir <- file.path(tempdir(), paste0(\"syn_a\", anchors, \"_m\", max_gaps))\n        \n        s <- infer_syntenet(\n            blast_list = diamond,\n            annotation = pdata$annotation,\n            outdir = outdir, \n            anchors = anchors,\n            max_gaps = max_gaps\n        )\n        return(s)\n    })\n    return(syn)\n}\n\n# Detect synteny\nsyn_fabaceae <- synteny_wrapper(d5, pdata$annotation, synteny_params)\nnames(syn_fabaceae) <- unlist(\n    lapply(synteny_params, function(x) paste0(\"a\", x[1], \"_m\", x[2]))\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nNow, let's use the network-based synteny assessment to see which combination\nof parameters is the best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assess networks\nfabaceae_scores <- assess_synnet_list(syn_fabaceae)\n\n# Look at scores, ranked from highest to lowest\nfabaceae_scores %>%\n    arrange(-Score) |>\n    knitr::kable(\n        caption = \"Scores for each synteny network.\"\n    )\n```\n\n::: {.cell-output-display}\nTable: Scores for each synteny network.\n\n|        CC| Node_count|  Rsquared|    Score|Network |\n|---------:|----------:|---------:|--------:|:-------|\n| 0.8253002|     237723| 0.6227916| 122187.2|a3_m25  |\n| 0.8290880|     235290| 0.6156847| 120105.4|a5_m35  |\n| 0.8392223|     226657| 0.6026291| 114629.5|a5_m15  |\n| 0.8412602|     224325| 0.5972865| 112717.3|a7_m25  |\n| 0.8347725|     231820| 0.5795957| 112161.6|a5_m25  |\n:::\n:::\n\n\nAs we can see, the combination of parameters `a = 3; m = 25` is\nthe best for this data set. \n\nFinally, let's visualize scores. To make visualization better, we will scale\nscores by the maximum value, so that values range from 0 to 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot scores\nsynteny_scores_fabaceae <- fabaceae_scores %>%\n    arrange(Score) %>%\n    mutate(Score = Score / max(Score)) %>%\n    mutate(Parameters = str_replace_all(Network, \"_\", \", \")) %>%\n    mutate(Parameters = factor(Parameters, levels = unique(Parameters))) %>%\n    ggplot(., aes(x = Parameters, y = Score)) +\n    geom_col(fill = \"grey60\", color = \"black\") +\n    theme_bw() +\n    labs(\n        title = \"Assessment of the Fabaceae synteny network\",\n        subtitle = \"a = minimum # of anchors; m = maximum # of gaps\",\n        y = \"Scaled score\"\n    )\n    \nsynteny_scores_fabaceae\n```\n\n::: {.cell-output-display}\n![Scaled scores for each synteny network.](06_synteny_assessment_fabaceae_files/figure-html/viz-fabaceae-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### Assessing species-specific synteny networks\n\nIn this section, we will infer species-specific synteny networks and\nassess each of them with our network-based approach.\n\nThis time, as we already have synteny networks for the whole Fabaceae family,\nwe don't need to infer them again; we will simply subset edges of the network\nthat contain nodes from the same species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create species-specific networks\nspecies_ids <- substr(species, start = 1, stop = 3)\n\nspecies_networks <- lapply(species_ids, function(x) {\n    \n    nets <- lapply(syn_fabaceae, function(y) {\n        edges <- y[startsWith(y$Anchor1, x) & startsWith(y$Anchor2, x), ]\n        return(edges)\n    })\n    return(nets)\n})\nnames(species_networks) <- species_ids\n\n# Exploring data\nnames(species_networks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mtr\" \"tpr\" \"psa\" \"car\" \"lja\" \"gma\" \"vmu\" \"lal\" \"arh\"\n```\n:::\n\n```{.r .cell-code}\nnames(species_networks$mtr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a3_m25\" \"a5_m15\" \"a5_m25\" \"a5_m35\" \"a7_m25\"\n```\n:::\n\n```{.r .cell-code}\n# Rename `species_networks` to keep full name\nnames(species_networks) <- c(\n    \"M. truncatula\", \"T. pratense\", \"P. sativum\", \"C. arietinum\",\n    \"L. japonicus\", \"G. max\", \"V. mungo\", \"L. albus\", \"A. hypogaea\"\n)\n```\n:::\n\n\nFor each species, we will assess the networks inferred with different \ncombinations of parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assess species-specific networks\nscores_species_nets <- lapply(seq_along(species_networks), function(x) {\n    \n    species <- names(species_networks)[x]\n    scores <- assess_synnet_list(species_networks[[species]])\n    scores$Score[is.nan(scores$Score)] <- 0\n    scores <- scores[order(scores$Score, decreasing = TRUE), ]\n    scores$Species <- species\n    scores$Score <- scores$Score / max(scores$Score)\n    return(scores)\n})\nscores_species_nets <- Reduce(rbind, scores_species_nets)\n\n# Plot data\nsynteny_scores_species <- scores_species_nets %>%\n    mutate(\n        Parameters = as.factor(str_replace_all(Network, \"_\", \", \")),\n        Species = as.factor(Species)\n    ) %>%\n    mutate(Network = reorder_within(Parameters, Score, Species)) %>%\n    ggplot(., aes(x = Network, y = Score, fill = Parameters)) +\n    geom_bar(stat = \"identity\", color = \"grey90\") +\n    facet_wrap(~Species, ncol = 3, scales = \"free\") +\n    scale_x_reordered() +\n    ggsci::scale_fill_jama() +\n    theme_bw() +\n    theme(axis.text.x = element_blank()) +\n    labs(\n        title = \"Assessment of species-specific synteny networks\",\n        subtitle = \"a = minimum # of anchors; m = maximum # of gaps\",\n        y = \"Scaled score (by species)\", x = \"\"\n    )\n    \nsynteny_scores_species\n```\n\n::: {.cell-output-display}\n![Scores for species-specific synteny networks.](06_synteny_assessment_fabaceae_files/figure-html/assess-species-networks-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThe figure demonstrates that the best combination of parameters depends on the\nspecies, so there is no \"universally\" best combination. However, some \npatterns emerge. The combinations `a = 7; m= 25` and `a = 5; m = 15` are \ntypically the worst. In some cases, they even lead to zero scores due to \nclustering coefficients of zero. Thus, if users want to test multiple \ncombinations of parameters for their own data set, they should only test the\ncombinations `a = 3; m = 25`, `a = 5; m = 25`, and `a = 5; m = 35`, which lead \nto the best score in 45%, 33%, and 22% of the species-specific networks,\nrespectively. Interestingly, the combination that leads to the best score in\nmost networks (`a = 3; m = 25`) is also the best when considering the whole\nFabaceae synteny network (see previous section).\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-10-06\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.0)\n aplot                  0.1.10    2023-03-08 [1] CRAN (R 4.3.0)\n beeswarm               0.4.0     2021-06-01 [1] CRAN (R 4.3.0)\n Biobase                2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics           0.46.0    2023-04-25 [1] Bioconductor\n BiocIO                 1.10.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n cogeqc               * 1.4.0     2023-04-25 [1] Bioconductor\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb           1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicAlignments      1.36.0    2023-04-25 [1] Bioconductor\n GenomicRanges          1.52.0    2023-04-25 [1] Bioconductor\n ggbeeswarm             0.7.2     2023-04-29 [1] CRAN (R 4.3.0)\n ggfun                  0.0.9     2022-11-21 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggplotify              0.1.0     2021-09-02 [1] CRAN (R 4.3.0)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.0)\n ggtree                 3.8.0     2023-04-25 [1] Bioconductor\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges                2.34.0    2023-04-25 [1] Bioconductor\n janeaustenr            1.0.0     2022-08-26 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics         1.12.2    2023-06-09 [1] Bioconductor\n matrixStats            1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n networkD3              0.4       2017-03-18 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n Rsamtools              2.16.0    2023-04-25 [1] Bioconductor\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n rtracklayer            1.60.0    2023-04-25 [1] Bioconductor\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors              0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n SnowballC              0.7.1     2023-04-25 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment   1.30.1    2023-05-01 [1] Bioconductor\n syntenet             * 1.3.3     2023-06-15 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidytext             * 0.4.1     2023-01-07 [1] CRAN (R 4.3.0)\n tidytree               0.4.2     2022-12-18 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tokenizers             0.3.0     2022-12-22 [1] CRAN (R 4.3.0)\n treeio                 1.24.1    2023-05-31 [1] Bioconductor\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n vipor                  0.4.5     2017-03-22 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n yulab.utils            0.0.6     2022-12-20 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "06_synteny_assessment_fabaceae_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}