{
  "hash": "ccdb9d312c9cf5b88063d94064a7c282",
  "result": {
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# On overclustering correction\n\nHere, we will verify whether the *dispersal* term of the orthogroup scores\nreally penalizes overclustering. For that, we ran OrthoFinder\n[@emms2019orthofinder] one more time using the previously described \nBrassicaceae data set, but now with an Markov inflation parameter (*mcl*)\nof 5. An *mcl* of 5 is usually considered too large, so we would expect\northogroup scores to be lower than, for instance, runs with *mcl* = 3. \nOur goal here is to verify if our hypothesis is true.\n\n\nLoading required packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\nlibrary(here)\nlibrary(cogeqc)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(patchwork)\nlibrary(tidyverse)\n\nsource(here(\"code\", \"utils.R\"))\n```\n:::\n\n\n\n## Data acquisition\n\nWe ran OrthoFinder with the following code:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Run OrthoFinder - default DIAMOND mode, mcl = 5\northofinder -f data -S diamond -I 5 -o products/result_files/default_5 -og\n```\n:::\n\n\nNow, we will load our data to the R session as a list of __cogeqc__-friendly\northogroup data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract tar.xz file\ntarfile <- here(\"products\", \"result_files\", \"Orthogroups.tar.xz\")\noutdir <- tempdir()\n\nsystem2(\"tar\", args = c(\"-xf\", tarfile, \"--directory\", outdir))\n\n# Get path to OrthoFinder output\nog_files <- list.files(\n    path = outdir, \n    pattern = \"Orthogroups.*\", full.names = TRUE\n)\n\n# Remove files for the ultrasensitive DIAMOND mode and add mcl=5\nog_files <- c(\n    og_files[c(2, 1, 3, 4)],\n    here(\"products\", \"result_files\", \"Orthogroups_default_5.tsv.gz\")\n)\n\n# Read and parse files\nogs <- lapply(og_files, function(x) {\n    og <- read_orthogroups(x)\n    og <- og %>%\n        mutate(Species = stringr::str_replace_all(Species, \"\\\\.\", \"\")) %>%\n        mutate(Gene = str_replace_all(\n            Gene, c(\n                \"\\\\.[0-9]$\" = \"\",\n                \"\\\\.[0-9]\\\\.p$\" = \"\",\n                \"\\\\.t[0-9]$\" = \"\",\n                \"\\\\.g$\" = \"\"\n            )\n        ))\n    return(og)\n})\nnames(ogs) <- c(\"1\", \"1.5\", \"2\", \"3\", \"5\")\n```\n:::\n\n\nNext, we will load InterPro annotation from PLAZA 5.0 [@van2022plaza].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to read functional annotation from PLAZA 5.0\nread_annotation <- function(url, cols = c(1, 3)) {\n    annot <- readr::read_tsv(url, show_col_types = FALSE, skip = 8) %>%\n        select(cols)\n    names(annot)[1:2] <- c(\"Gene\", \"Annotation\")\n    return(annot)\n}\n\n# Get Interpro annotation\nbase <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/\"\ninterpro <- list(\n    Athaliana = read_annotation(paste0(base, \"interpro.ath.csv.gz\")),     \n    Aarabicum = read_annotation(paste0(base, \"interpro.aar.csv.gz\")),\n    Alyrata_cvMN47 = read_annotation(paste0(base, \"interpro.aly.csv.gz\")),\n    Bcarinata_cvzd1 = read_annotation(paste0(base, \"interpro.bca.csv.gz\")),\n    Crubella_cvMonteGargano = read_annotation(paste0(base, \"interpro.cru.csv.gz\")),\n    Chirsuta = read_annotation(paste0(base, \"interpro.chi.csv.gz\")),\n    Sparvula = read_annotation(paste0(base, \"interpro.spa.csv.gz\"))\n)\n\ninterpro <- lapply(interpro, as.data.frame)\n```\n:::\n\n\n## Validating the overclustering correction\n\nNow that we have all data we need (orthogroup data frames and domain \nannotations), let's calculate orthogroup scores. Here, we will use the function\n`calculate_H_with_terms()` from the file *utils.R*, which contains a slightly\nmodified version of the function `calculate_H()` from __cogeqc__, but instead\nof updating the uncorrected scores with the corrected scores, it returns the\ndispersal terms and corrected scores and separate variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate orthogroup scores with and without correction for overclustering\nog_homogeneity <- Reduce(rbind, lapply(seq_along(ogs), function(x) {\n    \n    mode <- names(ogs)[x]\n    annotation <- Reduce(rbind, interpro) |> distinct()\n    \n    message(\"Working on \", mode)\n    \n    orthogroup_df <- merge(\n        ogs[[x]], \n        annotation,\n        all.x = TRUE\n    )\n    \n    scores_df <- calculate_H_with_terms(\n        orthogroup_df, correct_overclustering = TRUE, update_score = FALSE\n    )\n    scores_df$Mode <- mode\n    \n    return(scores_df)\n}))\n\nog_homogeneity$Mode <- factor(\n    og_homogeneity$Mode, levels = unique(og_homogeneity$Mode)\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nNext, let's visualize orthogroup scores with and without corrections, as well\nas look at the dispersal terms for each mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot scores\np_scores <- og_homogeneity |>\n    mutate(\n        Score = (Score - min(Score) / (max(Score) - min(Score))),\n        Score_c = (Score_c - min(Score_c) / (max(Score_c) - min(Score_c)))\n    ) |>\n    dplyr::select(Orthogroup, Score, `Corrected Score` = Score_c, Mode) |>\n    pivot_longer(\n        !c(\"Orthogroup\", \"Mode\"),\n        names_to = \"Measure\",\n        values_to = \"Score\"\n    ) |>\n    mutate(\n        Measure = factor(Measure, levels = c(\"Score\", \"Corrected Score\"))\n    ) |>\n    ggpubr::ggviolin(\n        x = \"Mode\", y = \"Score\", \n        orientation = \"horiz\",\n        fill = \"Mode\", \n        palette = rev(c(\"#006D2C\", \"#31A354\", \"#74C476\", \"#BAE4B3\", \"#c7f2bf\")),\n        add = \"boxplot\", add.params = list(fill = \"white\")\n    ) +\n    labs(\n        x = \"mcl inflation\", y = \"Scaled score\",\n        title = \"Orthogroup scores with and without correction\",\n        subtitle = \"Default DIAMOND mode\"\n    ) +\n    facet_wrap(~Measure, scales = \"free_x\", nrow = 1) +\n    theme(legend.position = \"none\")\n\n# Plot dispersal terms\np_dispersal <- og_homogeneity |>\n    dplyr::select(Mode, Dispersal) |>\n    mutate(Dispersal = Dispersal * 100) |>\n    dplyr::distinct() |>\n    ggpubr::ggbarplot(\n        x = \"Mode\", y = \"Dispersal\", stat = \"identity\", \n        orientation = \"horiz\",\n        fill = \"Mode\", \n        palette = rev(c(\"#006D2C\", \"#31A354\", \"#74C476\", \"#BAE4B3\", \"#c7f2bf\")),\n    ) +\n    labs(\n        x = \"\", y = \"Dispersal (%)\",\n        title = \"Dispersal terms\",\n        subtitle = \"Default DIAMOND mode\"\n    ) +\n    theme(\n        legend.position = \"none\",\n        axis.text.y = element_blank()\n    )\n\n# Combine plots\np_combined <- patchwork::wrap_plots(p_scores, p_dispersal, widths = c(2.5, 1))\n\np_combined\n```\n\n::: {.cell-output-display}\n![](05_on_overclustering_correction_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe can see that, without correction (homogeneity only), \nincreasing the value for the *mcl* parameter leads to increasingly larger \nscores. However, as homogeneity increases, the dispersal also increases.\nAfter correcting for dispersal, larger values for the *mcl* parameter do not\nlead to higher orthogroup scores.\n\nTo verify that formally, let's perform a Mann-Whitney U test for differences\nin orthogroup scores for runs with mcl of 3 and 5 with and without correcting\nfor dispersal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Without dispersal\ncompare(og_homogeneity, \"Score ~ Mode\") |>\n    filter(group1 == \"3\" & group2 == \"5\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  group1 group2    n1    n2 padj_greater padj_less padj_interpretation\n1      3      5 23849 25595            1         0                less\n    effsize magnitude\n1 0.3913194  moderate\n```\n:::\n\n```{.r .cell-code}\n# With dispersal\ncompare(og_homogeneity, \"Score_c ~ Mode\") |>\n    filter(group1 == \"3\" & group2 == \"5\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  group1 group2    n1    n2 padj_greater padj_less padj_interpretation\n1      3      5 23849 25595            0         1             greater\n    effsize magnitude\n1 0.3591549  moderate\n```\n:::\n:::\n\n\n\nAs expected, without correcting for dispersal, using *mcl* = 5 leads to better\northogroup scores than using *mcl* = 3. However, after correction, orthogroup\nscores for *mcl* = 5 are worse than scores for *mcl* = 3, which is desired.\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-10-06\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package          * version   date (UTC) lib source\n abind              1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n ape                5.7-1     2023-03-13 [1] CRAN (R 4.3.0)\n aplot              0.1.10    2023-03-08 [1] CRAN (R 4.3.0)\n backports          1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n beeswarm           0.4.0     2021-06-01 [1] CRAN (R 4.3.0)\n BiocGenerics       0.46.0    2023-04-25 [1] Bioconductor\n Biostrings         2.68.0    2023-04-25 [1] Bioconductor\n bitops             1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n broom              1.0.4     2023-03-11 [1] CRAN (R 4.3.0)\n car                3.1-2     2023-03-30 [1] CRAN (R 4.3.0)\n carData            3.0-5     2022-01-06 [1] CRAN (R 4.3.0)\n cli                3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n codetools          0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n cogeqc           * 1.4.0     2023-04-25 [1] Bioconductor\n coin               1.4-2     2021-10-08 [1] CRAN (R 4.3.0)\n colorspace         2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n crayon             1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n digest             0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n dplyr            * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n evaluate           0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi              1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver             2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastmap            1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats          * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n generics           0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb       1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData   1.2.10    2023-04-28 [1] Bioconductor\n ggbeeswarm         0.7.2     2023-04-29 [1] CRAN (R 4.3.0)\n ggfun              0.0.9     2022-11-21 [1] CRAN (R 4.3.0)\n ggplot2          * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggplotify          0.1.0     2021-09-02 [1] CRAN (R 4.3.0)\n ggpubr           * 0.6.0     2023-02-10 [1] CRAN (R 4.3.0)\n ggsignif           0.6.4     2022-10-13 [1] CRAN (R 4.3.0)\n ggtree             3.8.0     2023-04-25 [1] Bioconductor\n glue               1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n gridGraphics       0.5-1     2020-12-13 [1] CRAN (R 4.3.0)\n gtable             0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here             * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n hms                1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmltools          0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets        1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n igraph             1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n IRanges            2.34.0    2023-04-25 [1] Bioconductor\n jsonlite           1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n knitr              1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling           0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice            0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval           0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n libcoin            1.0-9     2021-09-27 [1] CRAN (R 4.3.0)\n lifecycle          1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n lubridate        * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr           2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS               7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix             1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n matrixStats        1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n modeltools         0.2-23    2020-03-05 [1] CRAN (R 4.3.0)\n multcomp           1.4-25    2023-06-20 [1] CRAN (R 4.3.0)\n munsell            0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n mvtnorm            1.1-3     2021-10-08 [1] CRAN (R 4.3.0)\n nlme               3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n patchwork        * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar             1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig          2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr               1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n purrr            * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                 2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp               1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl              1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr            * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2           1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n rlang              1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown          2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rprojroot          2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n rstatix          * 0.7.2     2023-02-01 [1] CRAN (R 4.3.0)\n rstudioapi         0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Vectors          0.38.0    2023-04-25 [1] Bioconductor\n sandwich           3.0-2     2022-06-15 [1] CRAN (R 4.3.0)\n scales             1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo        1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n stringi            1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr          * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n survival           3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n TH.data            1.1-2     2023-04-17 [1] CRAN (R 4.3.0)\n tibble           * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr            * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect         1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidytree           0.4.2     2022-12-18 [1] CRAN (R 4.3.0)\n tidyverse        * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange         0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n treeio             1.24.1    2023-05-31 [1] Bioconductor\n tzdb               0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8               1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs              0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n vipor              0.4.5     2017-03-22 [1] CRAN (R 4.3.0)\n withr              2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun               0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XVector            0.40.0    2023-04-25 [1] Bioconductor\n yaml               2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n yulab.utils        0.0.6     2022-12-20 [1] CRAN (R 4.3.0)\n zlibbioc           1.46.0    2023-04-25 [1] Bioconductor\n zoo                1.8-12    2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "05_on_overclustering_correction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}