{
  "hash": "9bad006d4dbfe139a9c4fea89a76054f",
  "result": {
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Assessing orthogroup inference for Brassicaceae genomes\n\nHere, we will compare the protein domain-based approach in `cogeqc` to assess \nthe impact of multiple combinations of parameters in OrthoFinder \n[@emms2019orthofinder] in the accuracy of orthogroup inference. \nThe data set used here will be a collection of Brassicaceae genomes. \nThe parameters we will change are:\n\n1. Program (`-S` option)\n - DIAMOND\n - DIAMOND ultrasensitive\n\n2. MCL inflation parameter (`-I`)\n - 1\n - 1.5 (default)\n - 2\n - 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(cogeqc)\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(clusterProfiler)\nlibrary(enrichplot)\nlibrary(patchwork)\nlibrary(dplyr)\n\nsource(here(\"code\", \"utils.R\"))\n```\n:::\n\n\n\n## Orthogroup inference\n\nTo start, we will load the proteome data and export each proteome\nas a FASTA file in the `data` directory, so we can pass it to OrthoFinder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load proteomes\nload(here(\"data\", \"brassicaceae_proteomes.rda\"))\n\n# Write files to data/\nlapply(seq_along(brassicaceae_proteomes), function(x) {\n    outfile <- here(\"data\", paste0(names(brassicaceae_proteomes)[x], \".fasta\"))\n    Biostrings::writeXStringSet(\n        brassicaceae_proteomes[[x]], outfile\n    )\n})\n```\n:::\n\n\nNow, we can run OrthoFinder for each combination of parameters.\nHere, we created 2 different bash scripts for each DIAMOND mode.\nThey are:\n\n- `of_diamond.sh`: code to run DIAMOND (default mode) for \ndifferent inflation parameters;\n- `of_diamond_ultra.sh`: code to run DIAMOND in ultrasensitive \nmode for different inflation parameters\n\nThe 2 files can be run with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash of_diamond.sh\nbash of_diamond_ultra.sh\n```\n:::\n\n\nThe *Orthogroups.tsv* files were all moved to the directory\n`products/result_files`.\n\n## Exploratory analysis of orthogroup inference results\n\nNow that we have the *Orthogroups.tsv* files from OrthoFinder, \nlet's load them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract tar.xz file\ntarfile <- here(\"products\", \"result_files\", \"Orthogroups.tar.xz\")\noutdir <- tempdir()\n\nsystem2(\"tar\", args = c(\"-xf\", tarfile, \"--directory\", outdir))\n\n# Get path to OrthoFinder output\nog_files <- list.files(\n    path = outdir, \n    pattern = \"Orthogroups.*\", full.names = TRUE\n)\n\n# Read and parse files\nogs <- lapply(og_files, function(x) {\n    og <- read_orthogroups(x)\n    og <- og %>%\n        mutate(Species = stringr::str_replace_all(Species, \"\\\\.\", \"\")) %>%\n        mutate(Gene = str_replace_all(\n            Gene, c(\n                \"\\\\.[0-9]$\" = \"\",\n                \"\\\\.[0-9]\\\\.p$\" = \"\",\n                \"\\\\.t[0-9]$\" = \"\",\n                \"\\\\.g$\" = \"\"\n            )\n        ))\n    return(og)\n})\nog_names <- gsub(\"\\\\.tsv\", \"\", basename(og_files))\nog_names <- gsub(\"Orthogroups_\", \"\", og_names)\n\nnames(ogs) <- og_names\n```\n:::\n\n\nLet's explore OG sizes for each combination of parameters and filter \northogroups by size to remove orthogroups that are\nartificially large.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize OG sizes\nog_sizes_plot <- patchwork::wrap_plots(\n    plot_og_sizes(ogs$default_1) + ggtitle(\"Default, mcl = 1\"), \n    plot_og_sizes(ogs$default_1_5) + ggtitle(\"Default, mcl = 1.5\") +\n        theme(axis.text.y = element_blank()),\n    plot_og_sizes(ogs$default_2) + ggtitle(\"Default, mcl = 2\") +\n        theme(axis.text.y = element_blank()), \n    plot_og_sizes(ogs$default_3) + ggtitle(\"Default, mcl = 3\") +\n        theme(axis.text.y = element_blank()),\n    plot_og_sizes(ogs$ultra_1) + ggtitle(\"Ultra, mcl = 1\") +\n        theme(axis.text.y = element_blank()), \n    plot_og_sizes(ogs$ultra_1_5) + ggtitle(\"Ultra, mcl = 1.5\") +\n        theme(axis.text.y = element_blank()),\n    plot_og_sizes(ogs$ultra_2) + ggtitle(\"Ultra, mcl = 2\") +\n        theme(axis.text.y = element_blank()), \n    plot_og_sizes(ogs$ultra_3) + ggtitle(\"Ultra, mcl = 3\") +\n        theme(axis.text.y = element_blank()),\n    nrow = 1, ncol = 8\n)\n\nog_sizes_plot\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell fig.dpi='200'}\n::: {.cell-output-display}\n![Orthogroup sizes for each run.](../products/plots/og_sizes_plot.png){width=2550}\n:::\n:::\n\n\nExpectedly, OrthoFinder runs with mcl inflation parameters of 1 lead to very\nlarge orthogroups, including some orthogroups with thousands of genes.\n\nNow, let's explore the percentage of orthogroups with >200, >100, and >50 genes \nin each OrthoFinder run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate OG sizes for each run\nog_sizes <- lapply(ogs, function(x) {\n    sizes <- as.matrix(table(x$Orthogroup, x$Species))\n    total <- rowSums(sizes)\n    \n    sizes_df <- data.frame(unclass(sizes))\n    sizes_df$Total <- total\n    return(sizes_df)\n})\n\n# What is the percentage of OGs with >=100 genes? And with >50 genes?\npercentage_size <- function(size_df, n = 100) {\n    return(sum(size_df$Total > n) / nrow(size_df) * 100)\n}\n\npercentages <- data.frame(\n    Mode = names(og_sizes),\n    P200 = unlist(lapply(og_sizes, percentage_size, n = 200)),\n    P100 = unlist(lapply(og_sizes, percentage_size, n = 100)),\n    P50 = unlist(lapply(og_sizes, percentage_size, n = 50)),\n    OGs = unlist(lapply(og_sizes, nrow))\n)\n\n# Reorder rows from lowest to highest mcl inflation\norders <- c(\n    \"default_1\", \"default_1_5\", \"default_2\", \"default_3\",\n    \"ultra_1\", \"ultra_1_5\", \"ultra_2\", \"ultra_3\"\n)\npercentages <- percentages[orders, ]\n\n# Visual exploration\npercentage_plot <- percentages %>%\n    tidyr::pivot_longer(cols = !Mode) %>%\n    mutate(name = str_replace_all(\n        name,\n        c(\n            \"OGs\" = \"Number of OGs\",\n            \"P200\" = \"% OGs with >200 genes\",\n            \"P100\" = \"% OGs with >100 genes\",\n            \"P50\" = \"% OGs with >50 genes\"\n        )\n    )) %>%\n    ggplot(., aes(y = Mode, x = value)) +\n    geom_col(aes(fill = Mode), show.legend = \"none\") +\n    scale_fill_manual(\n        values = c(\"ultra_3\" = \"#08519C\", \"ultra_2\" = \"#3182BD\",\n                   \"ultra_1_5\" = \"#6BAED6\", \"ultra_1\" = \"#BDD7E7\",\n                   \"default_3\" = \"#006D2C\", \"default_2\" = \"#31A354\",\n                   \"default_1_5\" = \"#74C476\", \"default_1\" = \"#BAE4B3\")\n    ) +\n    facet_wrap(~name, ncol = 4, scales = \"free_x\") +\n    theme_bw() +\n    labs(\n        x = \"\", y = \"OrthoFinder mode\",\n        title = \"Relationship between the number of orthogroups and orthogroup size per OrthoFinder mode\"\n    )\n\npercentage_plot\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nIt is very clear that increasing the mcl inflation increases the number of\northogroups, but decreases the percentage of OGs with more than 100 and 50\ngenes.\n\nFinally, let's remove OGs with >=200 genes to remove noise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter OGs\nogs_filtered <- lapply(seq_along(ogs), function(x) {\n    \n    # Which OGs less than 200 genes?\n    og_keep <- rownames(og_sizes[[x]][og_sizes[[x]]$Total < 200, ])\n    \n    fogs <- ogs[[x]][ogs[[x]]$Orthogroup %in% og_keep, ]\n    return(fogs)\n})\nnames(ogs_filtered) <- names(ogs)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Orthogroup assessment\n\nNow, let's get InterPro domain annotation for the following species to assess\northogroups:\n\n- *A. thaliana*\n- *A. arabicum*\n- *A. lyrata*\n- *B. carinata*\n- *C. rubella*\n- *C. hirsuta*\n- *S. parvula*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to read functional annotation from PLAZA 5.0\nread_annotation <- function(url, cols = c(1, 3)) {\n    annot <- readr::read_tsv(url, show_col_types = FALSE, skip = 8) %>%\n        select(cols)\n    names(annot)[1:2] <- c(\"Gene\", \"Annotation\")\n    return(annot)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get Interpro annotation\nbase <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/\"\ninterpro <- list(\n    Athaliana = read_annotation(paste0(base, \"interpro.ath.csv.gz\")),     \n    Aarabicum = read_annotation(paste0(base, \"interpro.aar.csv.gz\")),\n    Alyrata_cvMN47 = read_annotation(paste0(base, \"interpro.aly.csv.gz\")),\n    Bcarinata_cvzd1 = read_annotation(paste0(base, \"interpro.bca.csv.gz\")),\n    Crubella_cvMonteGargano = read_annotation(paste0(base, \"interpro.cru.csv.gz\")),\n    Chirsuta = read_annotation(paste0(base, \"interpro.chi.csv.gz\")),\n    Sparvula = read_annotation(paste0(base, \"interpro.spa.csv.gz\"))\n)\ninterpro <- lapply(interpro, as.data.frame)\n\n# Calculate homogeneity scores\nspecies_annotation <- names(interpro)\nog_assessment <- lapply(seq_along(ogs_filtered), function(x) {\n    \n    message(\"Working on mode \", names(ogs_filtered)[x])\n    orthogroups <- ogs_filtered[[x]]\n    orthogroups <- orthogroups[orthogroups$Species %in% species_annotation, ]\n    \n    res <- assess_orthogroups(orthogroups, interpro)\n    res$Mode <- factor(\n        names(ogs_filtered)[x], \n        levels = c(\n            \"ultra_3\", \"ultra_2\", \"ultra_1_5\", \"ultra_1\",\n            \"default_3\", \"default_2\", \"default_1_5\", \"default_1\"\n        )\n    )\n    return(res)\n})\nog_assessment <- Reduce(rbind, og_assessment)\n\n# Save homogeneity stats\nsave(\n    og_assessment, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"og_assessment_brassicaceae.rda\")\n)\n```\n:::\n\n\n## Comparing and visualizing homogeneity statistics\n\nHere, we will compare and visualize how the homogeneity scores are affected by:\n\n- different species choice\n- different mcl inflation values\n- different DIAMOND modes (default and ultra)\n\nQuick exploration of median and mean homogeneity:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(here(\"products\", \"result_files\", \"og_assessment_brassicaceae.rda\"))\n\n# Scale value to the maximum so that values range from 0 to 1\nog_assessment$Median_score <- og_assessment$Median_score / \n    max(og_assessment$Median_score)\n\n# Mean\nmean_og <- og_assessment %>%\n    group_by(Mode) %>%\n    summarise(mean = mean(Median_score))\n\n# Median\nmedian_og <- og_assessment %>%\n    group_by(Mode) %>%\n    summarise(median = median(Median_score))\n\nmean_and_median_og <- inner_join(mean_og, median_og) |>\n    dplyr::rename(Mean = mean, Median = median)\n\nknitr::kable(mean_and_median_og, caption = \"Mean and median OG scores.\", digits = 3)\n```\n\n::: {.cell-output-display}\nTable: Mean and median OG scores.\n\n|Mode        |  Mean| Median|\n|:-----------|-----:|------:|\n|ultra_3     | 0.640|  0.640|\n|ultra_2     | 0.631|  0.635|\n|ultra_1_5   | 0.620|  0.628|\n|ultra_1     | 0.425|  0.424|\n|default_3   | 0.639|  0.640|\n|default_2   | 0.631|  0.635|\n|default_1_5 | 0.620|  0.628|\n|default_1   | 0.425|  0.423|\n:::\n:::\n\n\n### Global distributions\n\nHere, we will compare and visualize all distros considering different \nDIAMOND modes and mcl inflation values. To start, let's perform Wilcoxon tests\nfor all combinations of modes and obtain effect sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relevel 'Mode' factor\nog_assessment$Mode <- factor(\n    og_assessment$Mode, \n    levels = c(\n        \"ultra_3\", \"ultra_2\", \"ultra_1_5\", \"ultra_1\",\n        \"default_3\", \"default_2\", \"default_1_5\", \"default_1\"\n    )\n)\n\n# Comparing all vs all\ncomp_global <- compare(og_assessment, \"Median_score ~ Mode\")\ncomp_global |>\n    filter_comparison() |>\n    knitr::kable(\n        caption = \"Mann-Whitney U test for differences in orthogroup scores with Wilcoxon effect sizes.\",\n        digits = 10\n    )\n```\n\n::: {.cell-output-display}\nTable: Mann-Whitney U test for differences in orthogroup scores with Wilcoxon effect sizes.\n\n|group1      |group2      |    n1|    n2|     padj|    effsize|magnitude |\n|:-----------|:-----------|-----:|-----:|--------:|----------:|:---------|\n|ultra_3     |ultra_2     | 19738| 18575| 0.00e+00| 0.04120347|small     |\n|ultra_3     |ultra_1_5   | 19738| 16898| 0.00e+00| 0.06125964|small     |\n|ultra_3     |ultra_1     | 19738|  5534| 0.00e+00| 0.34087185|moderate  |\n|ultra_3     |default_3   | 19738| 19765| 5.00e-10| 0.03113134|small     |\n|ultra_3     |default_2   | 19738| 18633| 0.00e+00| 0.04197169|small     |\n|ultra_3     |default_1_5 | 19738| 16975| 0.00e+00| 0.06233198|small     |\n|ultra_3     |default_1   | 19738|  5587| 0.00e+00| 0.34258513|moderate  |\n|ultra_2     |ultra_1_5   | 18575| 16898| 0.00e+00| 0.04340346|small     |\n|ultra_2     |ultra_1     | 18575|  5534| 0.00e+00| 0.33536590|moderate  |\n|ultra_2     |default_3   | 18575| 19765| 0.00e+00| 0.04018176|small     |\n|ultra_2     |default_2   | 18575| 18633| 2.55e-08| 0.02855053|small     |\n|ultra_2     |default_1_5 | 18575| 16975| 0.00e+00| 0.04451653|small     |\n|ultra_2     |default_1   | 18575|  5587| 0.00e+00| 0.33742024|moderate  |\n|ultra_1_5   |ultra_1     | 16898|  5534| 0.00e+00| 0.32401575|moderate  |\n|ultra_1_5   |default_3   | 16898| 19765| 0.00e+00| 0.05737302|small     |\n|ultra_1_5   |default_2   | 16898| 18633| 0.00e+00| 0.04259062|small     |\n|ultra_1_5   |default_1_5 | 16898| 16975| 1.72e-06| 0.02554732|small     |\n|ultra_1_5   |default_1   | 16898|  5587| 0.00e+00| 0.32541386|moderate  |\n|ultra_1     |default_3   |  5534| 19765| 0.00e+00| 0.34014551|moderate  |\n|ultra_1     |default_2   |  5534| 18633| 0.00e+00| 0.33456485|moderate  |\n|ultra_1     |default_1_5 |  5534| 16975| 0.00e+00| 0.32260079|moderate  |\n|ultra_1     |default_1   |  5534|  5587| 2.70e-02| 0.01928759|small     |\n|default_3   |default_2   | 19765| 18633| 0.00e+00| 0.04084430|small     |\n|default_3   |default_1_5 | 19765| 16975| 0.00e+00| 0.06124558|small     |\n|default_3   |default_1   | 19765|  5587| 0.00e+00| 0.34147823|moderate  |\n|default_2   |default_1_5 | 18633| 16975| 0.00e+00| 0.04366051|small     |\n|default_2   |default_1   | 18633|  5587| 0.00e+00| 0.33616829|moderate  |\n|default_1_5 |default_1   | 16975|  5587| 0.00e+00| 0.32420710|moderate  |\n:::\n:::\n\n\nAs we can see, using mcl = 1 leads to much smaller homogeneity scores as \ncompared to every other mcl value. For mcl values >=1.5, there are differences, \nbut they are likely due to large sample sizes, as indicated by small effect \nsizes. \n\nThe default OrthoFinder mode (default DIAMOND, mcl = 1.5) leads to higher \nhomogeneity as compared to runs using mcl = 1, both in default and \nultrasensitive DIAMOND modes. The difference between the default mode and runs\nwith higher mcl values are negligible.\n\nNow, let's visualize the distributions and compare the default OrthoFinder\nmode with every other mode, highlighting significant differences\n(*P* < 0.05) with effect size > 0.1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize\nglobal_comps <- list(\n    c(\"default_1_5\", \"ultra_1\"),\n    c(\"default_1_5\", \"default_1\")\n) \n\np_distros_global <- ggviolin(\n    og_assessment, y = \"Median_score\", x = \"Mode\", \n    orientation = \"horiz\", trim = TRUE,\n    add = c(\"boxplot\", \"mean\"), \n    fill = \"Mode\", add.params = list(fill = \"white\")\n) +\n    scale_fill_manual(\n        values = c(\"ultra_3\" = \"#08519C\", \"ultra_2\" = \"#3182BD\",\n                   \"ultra_1_5\" = \"#6BAED6\", \"ultra_1\" = \"#BDD7E7\",\n                   \"default_3\" = \"#006D2C\", \"default_2\" = \"#31A354\",\n                   \"default_1_5\" = \"#74C476\", \"default_1\" = \"#BAE4B3\")\n    ) +\n    stat_compare_means(\n        comparisons = global_comps, label = \"p.signif\",\n        method = \"wilcox.test\"\n    ) +\n    theme(legend.position = \"none\") +\n    labs(y = \"Scaled homogeneity scores\", x = \"OrthoFinder modes\",\n         title = \"Distribution of mean homogeneity scores for orthogroups\") +\n    theme(plot.subtitle = ggtext::element_markdown())\n\np_distros_global\n```\n\n::: {.cell-output-display}\n![Distribution of mean orthogroup scores for each OrthoFinder run.](04_orthogroup_inference_brassicaceae_files/figure-html/og-distros-viz-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### The effect of species choice\n\nHere, we will compare the distributions of orthogroups scores using each \nspecies individually to see if the species choice has an impact \non the conclusions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nog_species_long <- Reduce(rbind, lapply(2:8, function(x) {\n    \n    var <- names(og_assessment)[x]\n    species_name <- gsub(\"_.*\", \"\", var)\n    \n    long_df <- og_assessment[, c(\"Orthogroups\", var, \"Mode\")]\n    names(long_df) <- c(\"OGs\", \"Score\", \"Mode\")\n    long_df$Score <- long_df$Score / max(long_df$Score, na.rm = TRUE)\n    long_df$Species <- species_name\n    \n    return(long_df)\n}))\n\nog_species_long <- og_species_long[!is.na(og_species_long$Score), ]\nog_species_long <- og_species_long |>\n    mutate(\n        Species = str_replace_all(\n            Species, \n            c(\n                \"Aarabicum\" = \"A. arabicum\",\n                \"Alyrata\" = \"A. lyrata\",\n                \"Athaliana\" = \"A. thaliana\",\n                \"Bcarinata\" = \"B. carinata\",\n                \"Chirsuta\" = \"C. hirsuta\",\n                \"Crubella\" = \"C. rubella\",\n                \"Sparvula\" = \"S. parvula\"\n            )\n        )\n    )\n\n\np_distros_by_species <- ggviolin(\n    og_species_long, \n    y = \"Score\", x = \"Mode\", \n    orientation = \"horiz\", trim = TRUE,\n    add = c(\"boxplot\", \"mean\"), facet.by = \"Species\", nrow = 1,\n    fill = \"Mode\", add.params = list(fill = \"white\")\n) +\n    scale_fill_manual(\n        values = c(\n            \"ultra_3\" = \"#08519C\", \"ultra_2\" = \"#3182BD\",\n            \"ultra_1_5\" = \"#6BAED6\", \"ultra_1\" = \"#BDD7E7\",\n            \"default_3\" = \"#006D2C\", \"default_2\" = \"#31A354\",\n            \"default_1_5\" = \"#74C476\", \"default_1\" = \"#BAE4B3\"\n        )\n    ) +\n    theme(legend.position = \"none\") +\n    labs(\n        y = \"Scaled homogeneity scores\", x = \"OrthoFinder modes\",\n        title = \"Distribution of OG scores for each species\"\n    ) +\n    scale_x_discrete(\n        labels = c(\n            \"default_1\" = \"Default, 1\",\n            \"default_1_5\" = \"Default, 1.5\",\n            \"default_2\" = \"Default, 2\",\n            \"default_3\" = \"Default, 3\",\n            \"ultra_1\" = \"Ultra, 1\",\n            \"ultra_1_5\" = \"Ultra, 1.5\",\n            \"ultra_2\" = \"Ultra, 2\",\n            \"ultra_3\" = \"Ultra, 3\"\n        )\n    ) +\n    theme(axis.text.x = element_text(angle = 60, vjust = 0.5))\n\np_distros_by_species\n```\n\n::: {.cell-output-display}\n![Distribution of orthogroup scores for each OrthoFinder run calculated for each species separately.](04_orthogroup_inference_brassicaceae_files/figure-html/species-choice-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nWe conclude that the species choice does not affect the comparisons of\northogroup scores among OrthoFinder runs.\n\n\n### The effect of mcl inflation parameters\n\nHere, we will explore the impact of changing mcl inflation parameters in\nthe homogeneity of orthogroups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Process data to include information on DIAMOND mode and mcl\nog_modes <- og_assessment %>%\n    mutate(diamond = str_replace_all(Mode, \"_.*\", \"\")) %>%\n    mutate(mcl = str_replace_all(Mode, c(\"default_\" = \"\", \"ultra_\" = \"\"))) %>%\n    mutate(mcl = str_replace_all(mcl, \"_\", \".\")) %>%\n    mutate(mcl = as.numeric(mcl))\n\n# Obtain P-values from Wilcoxon tests and effect sizes\ncomp_mcl_default <- og_modes %>% \n    filter(diamond == \"default\") %>%\n    compare(., \"Median_score ~ mcl\")\n\ncomp_mcl_default |>\n    filter_comparison() |>\n    knitr::kable(\n        caption = \"Mann-Whitney U test for differences in orthogroup scores between runs with different mcl parameters and standard DIAMOND mode. Effect sizes represent Wilcoxon effect sizes.\",\n        digits = 10\n    )\n```\n\n::: {.cell-output-display}\nTable: Mann-Whitney U test for differences in orthogroup scores between runs with different mcl parameters and standard DIAMOND mode. Effect sizes represent Wilcoxon effect sizes.\n\n|group1 |group2 |    n1|    n2| padj|    effsize|magnitude |\n|:------|:------|-----:|-----:|----:|----------:|:---------|\n|1      |1.5    |  5587| 16975|    0| 0.32420710|moderate  |\n|1      |2      |  5587| 18633|    0| 0.33616829|moderate  |\n|1      |3      |  5587| 19765|    0| 0.34147823|moderate  |\n|1.5    |2      | 16975| 18633|    0| 0.04366051|small     |\n|1.5    |3      | 16975| 19765|    0| 0.06124558|small     |\n|2      |3      | 18633| 19765|    0| 0.04084430|small     |\n:::\n\n```{.r .cell-code}\ncomp_mcl_ultra <- og_modes %>% \n    filter(diamond == \"ultra\") %>%\n    compare(., \"Median_score ~ mcl\")\n\ncomp_mcl_ultra |>\n    filter_comparison() |>\n    knitr::kable(\n        caption = \"Mann-Whitney U test for differences in orthogroup scores between runs with different mcl parameters and ultra-sensitive DIAMOND mode. Effect sizes represent Wilcoxon effect sizes.\",\n        digits = 10\n    )\n```\n\n::: {.cell-output-display}\nTable: Mann-Whitney U test for differences in orthogroup scores between runs with different mcl parameters and ultra-sensitive DIAMOND mode. Effect sizes represent Wilcoxon effect sizes.\n\n|group1 |group2 |    n1|    n2| padj|    effsize|magnitude |\n|:------|:------|-----:|-----:|----:|----------:|:---------|\n|1      |1.5    |  5534| 16898|    0| 0.32401575|moderate  |\n|1      |2      |  5534| 18575|    0| 0.33536590|moderate  |\n|1      |3      |  5534| 19738|    0| 0.34087185|moderate  |\n|1.5    |2      | 16898| 18575|    0| 0.04340346|small     |\n|1.5    |3      | 16898| 19738|    0| 0.06125964|small     |\n|2      |3      | 18575| 19738|    0| 0.04120347|small     |\n:::\n:::\n\n\nIn line with what we demonstrated in the global distributions, the Wilcoxon \ntests show that mcl = 1 leads to much lower homogeneity scores than \nall other mcl values, regardless of the DIAMOND mode. Additionally, increasing\nmcl values leads to increased homogeneity scores (i.e., homogeneity scores\nfollow the order of mcl 3 > 2 > 1.5 > 1), but differences among \nmcl values >=1.5 are negligible, as indicated by small effect sizes. Thus,\nlow P-values could be due to large sample sizes.\n\nNow, let's visualize the distributions.\n\n\n::: {.cell fig.dpi='200'}\n\n```{.r .cell-code}\n# List of comparisons to be made\nmcl_comp <- list(\n    c(\"1\", \"1.5\"), c(\"1\", \"2\"), c(\"1\", \"3\"), c(\"1.5\", \"3\")\n)\n\n# Plot\np_distros_mcl <- og_assessment %>%\n    mutate(diamond = str_replace_all(Mode, \"_.*\", \"\")) %>%\n    mutate(mcl = str_replace_all(Mode, c(\"default_\" = \"\", \"ultra_\" = \"\"))) %>%\n    mutate(mcl = str_replace_all(mcl, \"_\", \".\")) %>%\n    mutate(mcl = as.numeric(mcl)) %>%\n    ggviolin(., x = \"mcl\", y = \"Median_score\", trim = TRUE,\n             add = c(\"boxplot\", \"mean\"), facet.by = \"diamond\",\n             fill = \"Mode\", add.params = list(fill = \"white\")) +\n    theme(legend.position = \"none\") +\n    scale_fill_manual(\n        values = c(\"ultra_3\" = \"#08519C\", \"ultra_2\" = \"#3182BD\",\n                   \"ultra_1_5\" = \"#6BAED6\", \"ultra_1\" = \"#BDD7E7\",\n                   \"default_3\" = \"#006D2C\", \"default_2\" = \"#31A354\",\n                   \"default_1_5\" = \"#74C476\", \"default_1\" = \"#BAE4B3\")\n    ) +\n    stat_compare_means(\n        comparisons = mcl_comp, label = \"p.signif\",\n        method = \"wilcox.test\"\n    ) +\n    labs(\n        y = \"Scaled homogeneity scores\", x = \"MCL inflation parameters\",\n        title = \"Effect of MCL inflation values on orthogroup inference\",\n        subtitle = \"Panels represent DIAMOND sensitivity modes\"\n    )\n\np_distros_mcl\n```\n\n::: {.cell-output-display}\n![Effect of MCL inflation values on orthogroup scores.](04_orthogroup_inference_brassicaceae_files/figure-html/viz-og-mcl-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### The effect of DIAMOND mode (default vs ultra)\n\nHere, we will investigate whether changing the DIAMOND mode\n(default vs ultrasensitive) in OrthoFinder affects orthogroup homogeneity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare median scores\nmcl1 <- og_modes %>% \n    filter(mcl == 1) %>%\n    compare(., \"Median_score ~ diamond\") |>\n    filter_comparison()\n\nmcl1_5 <- og_modes %>% \n    filter(mcl == 1.5) %>%\n    compare(., \"Median_score ~ diamond\") |>\n    filter_comparison()\n\nmcl2 <- og_modes %>% \n    filter(mcl == 2) %>%\n    compare(., \"Median_score ~ diamond\") |>\n    filter_comparison()\n\nmcl3 <- og_modes %>% \n    filter(mcl == 3) %>%\n    compare(., \"Median_score ~ diamond\") |>\n    filter_comparison()\n\nbind_rows(\n    mcl1 |> mutate(mcl = 1),\n    mcl1_5 |> mutate(mcl = 1.5), \n    mcl2 |> mutate(mcl = 2), \n    mcl3 |> mutate(mcl = 3)\n) |>\n    knitr::kable(\n        caption = \"Mann-Whitney U test for differences in orthogroup scores between runs with different DIAMOND modes for each mcl value. Effect sizes represent Wilcoxon effect sizes.\",\n        digits = 10\n    )\n```\n\n::: {.cell-output-display}\nTable: Mann-Whitney U test for differences in orthogroup scores between runs with different DIAMOND modes for each mcl value. Effect sizes represent Wilcoxon effect sizes.\n\n|group1  |group2 |    n1|    n2|     padj|    effsize|magnitude | mcl|\n|:-------|:------|-----:|-----:|--------:|----------:|:---------|---:|\n|default |ultra  |  5587|  5534| 2.10e-02| 0.01928759|small     | 1.0|\n|default |ultra  | 16975| 16898| 1.29e-06| 0.02554732|small     | 1.5|\n|default |ultra  | 18633| 18575| 1.82e-08| 0.02855053|small     | 2.0|\n|default |ultra  | 19765| 19738| 3.00e-10| 0.03113134|small     | 3.0|\n:::\n:::\n\n\nAgain, we can see that there are significant P-values, but very small effect \nsizes, indicating no difference resulting from the DIAMOND mode. \nThus, users can run the default mode of DIAMOND, which is way faster,\nwithout any loss of biological signal for orthogroup inference.\n\nLet's visualize the distributions.\n\n\n::: {.cell fig.dpi='200'}\n\n```{.r .cell-code}\n# Plot\np_distros_diamond <- og_modes %>%\n    ggviolin(., x = \"diamond\", y = \"Median_score\", trim = TRUE,\n             add = c(\"boxplot\", \"mean\"), facet.by = \"mcl\", ncol = 4,\n             fill = \"Mode\", add.params = list(fill = \"white\")) +\n    theme(legend.position = \"none\") +\n    scale_fill_manual(\n        values = c(\"ultra_3\" = \"#08519C\", \"ultra_2\" = \"#3182BD\",\n                   \"ultra_1_5\" = \"#6BAED6\", \"ultra_1\" = \"#BDD7E7\",\n                   \"default_3\" = \"#006D2C\", \"default_2\" = \"#31A354\",\n                   \"default_1_5\" = \"#74C476\", \"default_1\" = \"#BAE4B3\")\n    ) +\n    labs(y = \"Scaled homogeneity scores\", x = \"DIAMOND mode\",\n         title = \"Effect of DIAMOND sensitivity mode on orthogroup inference\",\n         subtitle = \"Panels represent MCL inflation parameters\") +\n    theme(plot.subtitle = ggtext::element_markdown())\n\np_distros_diamond\n```\n\n::: {.cell-output-display}\n![Effect of DIAMOND mode on orthogroup scores.](04_orthogroup_inference_brassicaceae_files/figure-html/og-diamond-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Functional analysis of homogeneous and heterogeneous gene families\n\nBy looking at the global distributions of homogeneity scores, we can\nsee that all distributions have a similar shape. This pattern\nsuggests that some gene families tend to be more homogeneous (scores \nclose to 1), while others tend to include domains that are not shared by\nall members. The latter can be, for instance, rapidly evolving families\nthat gain or lose domains at faster rates.\n\nTo explore what these groups of families contain, we will perform a functional\nenrichment analysis each group. First of anything, let's plot\nthe distribution for the default OrthoFinder mode and highlight the groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot distro with groups\np_distros_groups <- og_assessment %>%\n    filter(Mode == \"default_1_5\") %>%\n    ggplot(aes(x = Median_score)) +\n    geom_density(fill = \"grey80\", color = \"black\") +\n    ggpubr::theme_pubr() +\n    labs(\n        y = \"Density\", x = \"Orthogroup scores\",\n        title = \"Distribution of mean homogeneity scores for orthogroups\",\n        subtitle = \"Scores for the default OrthoFinder mode\"\n    ) +\n    geom_vline(xintercept = 0.56, color = \"firebrick\", linetype = 2) +\n    geom_vline(xintercept = 0.87, color = \"firebrick\", linetype = 2)\n\np_distros_groups\n```\n\n::: {.cell-output-display}\n![Distribution of mean homogeneity scores for orthogroups](04_orthogroup_inference_brassicaceae_files/figure-html/plot-distros-with-groups-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nNow, let's get vectors of genes in orthogroups from each of the groups \nhighlighted in the figure above.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies <- c(\n    \"Athaliana\", \"Aarabicum\", \"Alyrata_cvMN47\", \"Bcarinata_cvzd1\",\n    \"Crubella_cvMonteGargano\", \"Chirsuta\", \"Sparvula\"\n)\n\n# Get genes and orthogroups (default mode)\ngenes_ogs <- ogs_filtered$default_1_5\n\n# Keep only species for which we have functional annotation info\ngenes_ogs <- genes_ogs[genes_ogs$Species %in% species, c(1, 3)]\n\n# Get background genes (all genes in OGs)\nbackground <- genes_ogs$Gene\n\n# Find orthogroups for each group\n## G1: 0 - 0.56\ng1 <- og_assessment %>%\n    filter(Mode == \"default_1_5\") %>%\n    mutate(Median_score = Median_score / max(Median_score)) %>%\n    filter(Median_score <= 0.56) %>%\n    select(Orthogroups) %>%\n    inner_join(., genes_ogs, by = c(\"Orthogroups\" = \"Orthogroup\")) %>%\n    pull(Gene)\n\n## G2: 0.56 - 0.87\ng2 <- og_assessment %>%\n    filter(Mode == \"default_1_5\") %>%\n    mutate(Median_score = Median_score / max(Median_score)) %>%\n    filter(Median_score > 0.56 & Median_score <= 0.87) %>%\n    select(Orthogroups) %>%\n    inner_join(., genes_ogs, by = c(\"Orthogroups\" = \"Orthogroup\")) %>%\n    pull(Gene)\n\n\n## G3: 0.87 - 1\ng3 <- og_assessment %>%\n    filter(Mode == \"default_1_5\") %>%\n    mutate(Median_score = Median_score / max(Median_score)) %>%\n    filter(Median_score > 0.87) %>%\n    select(Orthogroups) %>%\n    inner_join(., genes_ogs, by = c(\"Orthogroups\" = \"Orthogroup\")) %>%\n    pull(Gene)\n```\n:::\n\n\nNext, we need to get functional annotation from PLAZA. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(timeout = 6000)\nplaza_species <- c(\"ath\", \"aar\", \"aly\", \"bca\", \"cru\", \"chi\", \"spa\")\n\n# GO annotation\nbgo <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/\"\ngo <- lapply(plaza_species, function(x) {\n    y <- read_annotation(paste0(bgo, \"go.\", x, \".csv.gz\"), c(1, 3, 8))\n    term2gene <- y[, c(2, 1)] %>% distinct(., .keep_all = TRUE)\n    term2name <- y[, c(2, 3)] %>% distinct(., .keep_all = TRUE)\n    res <- list(\n        TERM2GENE = as.data.frame(term2gene), \n        TERM2NAME = as.data.frame(term2name)\n    )\n    return(res)\n})\ngo_gene <- Reduce(rbind, lapply(go, function(x) return(x$TERM2GENE)))\ngo_des <- Reduce(rbind, lapply(go, function(x) return(x$TERM2NAME)))\n\n## Remove non-BP terms\nath_bp <- file.path(tempdir(), \"ath_bp.rds\")\ndownload.file(\n    \"https://jokergoo.github.io/rGREAT_genesets/genesets/bp_athaliana_eg_gene_go_genesets.rds\",\n    destfile = ath_bp\n)\ngobp <- readRDS(ath_bp)\ngobp <- names(gobp)\ngo_gene <- go_gene[go_gene$Annotation %in% gobp, ]\ngo_des <- go_des[go_des$Annotation %in% gobp, ]\nrm(gobp)\n\n# MapMan annotation\nbmm <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/MapMan/\"\nmm <- lapply(plaza_species, function(x) {\n    y <- read_annotation(paste0(bmm, \"mapman.\", x, \".csv.gz\"), c(3:5))\n    term2gene <- y[, c(2, 1)] %>% distinct(., .keep_all = TRUE)\n    term2name <- y[, c(2, 3)] %>% distinct(., .keep_all = TRUE)\n    res <- list(\n        TERM2GENE = as.data.frame(term2gene), \n        TERM2NAME = as.data.frame(term2name)\n    )\n    return(res)\n})\nmm_gene <- Reduce(rbind, lapply(mm, function(x) return(x$TERM2GENE)))\nmm_des <- Reduce(rbind, lapply(mm, function(x) return(x$TERM2NAME))) %>%\n    mutate(desc = str_replace_all(desc, \".*\\\\.\", \"\"))\n\n# InterPro\nbi <- \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/\"\nip <- lapply(plaza_species, function(x) {\n    y <- read_annotation(paste0(bi, \"interpro.\", x, \".csv.gz\"), c(1, 3, 4))\n    term2gene <- y[, c(2, 1)] %>% distinct(., .keep_all = TRUE)\n    term2name <- y[, c(2, 3)] %>% distinct(., .keep_all = TRUE)\n    res <- list(\n        TERM2GENE = as.data.frame(term2gene), \n        TERM2NAME = as.data.frame(term2name)\n    )\n    return(res)\n})\nip_gene <- Reduce(rbind, lapply(ip, function(x) return(x$TERM2GENE)))\nip_des <- Reduce(rbind, lapply(ip, function(x) return(x$TERM2NAME)))\n```\n:::\n\n\nNow, we can finally perform the enrichment analyses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform enrichment analyses\nlibrary(clusterProfiler)\n\ntgene <- list(\n    GO = go_gene, \n    MapMan = mm_gene,\n    InterPro = ip_gene\n)\ntname <- list(\n    GO = go_des,\n    MapMan = mm_des,\n    InterPro = ip_des\n)\n\n## G1\ng1_sea <- Reduce(rbind, lapply(seq_along(tgene), function(x) {\n    return(as.data.frame(enricher(\n        g1, universe = background, \n        TERM2GENE = tgene[[x]], TERM2NAME = tname[[x]]\n    ))[, 1:6])\n}))\n\n## G2\ng2_sea <- Reduce(rbind, lapply(seq_along(tgene), function(x) {\n    return(as.data.frame(enricher(\n        g2, universe = background, \n        TERM2GENE = tgene[[x]], TERM2NAME = tname[[x]]\n    ))[, 1:6])\n}))\n\n## G3\ng3_sea <- Reduce(rbind, lapply(seq_along(tgene), function(x) {\n    return(as.data.frame(enricher(\n        g3, universe = background, \n        TERM2GENE = tgene[[x]], TERM2NAME = tname[[x]]\n    ))[, 1:6])\n}))\n\n# Combine SEA results in a single data frame and export it as a .tsv file\n## Combine data frames\nsea_res <- rbind(\n    g1_sea %>% mutate(group = \"G1\"), \n    g2_sea %>% mutate(group = \"G2\"),\n    g3_sea %>% mutate(group = \"G3\")\n)\n\n## Export .tsv\nwrite_tsv(\n    sea_res,\n    file = here(\"products\", \"tables\", \"enrichment_bygroup.tsv\")\n)\n```\n:::\n\n\nThe complete enrichment results are stored in the \ntable `enrichment_bygroup.tsv`. To make visualization and interpretation\neasier, we will perform semantic similarity analysis to group redundant\nterms and get a global view of processes associated with each cluster.\n\nHere, we will only use GO terms from the category \"Biological Process\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Semantic similarity analysis for GO-BP terms\n## G1\ng1_summary <- pairwise_termsim(enricher(\n    g1, universe = background, \n    TERM2GENE = go_gene, TERM2NAME = go_des\n))\n\n## G2\ng2_summary <- pairwise_termsim(enricher(\n    g2, universe = background, \n    TERM2GENE = go_gene, TERM2NAME = go_des\n))\n\n## G3\ng3_summary <- pairwise_termsim(enricher(\n    g3, universe = background, \n    TERM2GENE = go_gene, TERM2NAME = go_des\n))\n\n# Save objects\nsave(\n    g1_summary, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"g1_summary.rda\")\n)\n\nsave(\n    g2_summary, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"g2_summary.rda\")\n)\n\nsave(\n    g3_summary, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"g3_summary.rda\")\n)\n```\n:::\n\n\nNow, let's plot the results.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell fig.dpi='200'}\n\n```{.r .cell-code}\n# Tree plot\np_tree_g1 <- treeplot(g1_summary, nWords = 0) +\n    ggsci::scale_fill_jama() +\n    ggtitle(\"Group 1\")\np_tree_g1$layers[[4]] <- NULL\n\n\np_tree_g2 <- treeplot(g2_summary, nCluster = 7, nWords = 0) +\n    ggsci::scale_fill_jama() +\n    ggtitle(\"Group 2\")\np_tree_g2$layers[[4]] <- NULL\n\n\np_tree_g3 <- treeplot(g3_summary, nWords = 0) +\n    ggsci::scale_fill_jama() +\n    ggtitle(\"Group 3\")\np_tree_g3$layers[[4]] <- NULL\n\n\n# Replace P.adj with -log10(P.adj)\np_tree_g1$data$color <- -log10(p_tree_g1$data$color)\np_tree_g2$data$color <- -log10(p_tree_g2$data$color)\np_tree_g3$data$color <- -log10(p_tree_g3$data$color)\n\n\n# Combine plots in one, with shared legends\nrcol <- range(\n    c(\n        p_tree_g1$data$color, p_tree_g2$data$color, p_tree_g3$data$color\n    ),\n    na.rm = TRUE\n)\nrsize <- range(\n    c(\n        p_tree_g1$data$count, p_tree_g2$data$count, p_tree_g2$data$count\n    ),\n    na.rm = TRUE\n)\n    \nwrap_plots(p_tree_g1, p_tree_g2, p_tree_g3) +\n    plot_layout(guides = \"collect\") &\n    scale_color_continuous(name = \"-Log10(P)\", limits = signif(rcol, 2)) &\n    scale_size_continuous(name = \"Gene count\", limits = rsize) &\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Tree plot of functional terms associated with each orthogroup cluster.](04_orthogroup_inference_brassicaceae_files/figure-html/plot-treeplot-1.png){width=1920}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell fig.dpi='200'}\n\n```{.r .cell-code}\n# Dot plot\np_dot_g1 <- dotplot(g1_summary, showCategory = 20) + ggtitle(\"Group 1\")\np_dot_g2 <- dotplot(g2_summary, showCategory = 20) + ggtitle(\"Group 2\")\np_dot_g3 <- dotplot(g3_summary, showCategory = 20) + ggtitle(\"Group 3\")\n\n# Replace P.adj with -log10(P.adj)\np_dot_g1$data$p.adjust <- -log10(p_dot_g1$data$p.adjust)\np_dot_g2$data$p.adjust <- -log10(p_dot_g2$data$p.adjust)\np_dot_g3$data$p.adjust <- -log10(p_dot_g3$data$p.adjust)\n\n# Combine plots in one, keep shared legend\nrcol <- range(\n    c(\n        p_dot_g1$data$p.adjust, p_dot_g2$data$p.adjust, \n        p_dot_g3$data$p.adjust\n    ),\n    na.rm = TRUE\n)\nrsize <- range(\n    c(\n        p_dot_g1$data$Count, p_dot_g2$data$Count, p_dot_g3$data$Count\n    ),\n    na.rm = TRUE\n)\n\nwrap_plots(p_dot_g1, p_dot_g2, p_dot_g3) +\n    plot_layout(guides = \"collect\") &\n    scale_color_continuous(name = \"-Log10(P)\", limits = signif(rcol, 2)) &\n    scale_size_continuous(name = \"Gene count\", limits = rsize) &\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Dotplot of functional terms associated with each orthogroup cluster.](04_orthogroup_inference_brassicaceae_files/figure-html/plot-dotplot-1.png){width=1728}\n:::\n:::\n\n\nThe plots show that genes associated to particular biological processes\ntend to be clustered in the same orthogroup (group 3, scores closer to 1),\nwhile genes associated to other biological processes tend to be more dispersed\nacross orthogroups (groups 1 and 2, scores closer to 1), \npossibly because they are evolving faster and, hence, have lower sequence similarity among themselves. In details, these genes and processes are:\n\n- **Group 1:** ATP production, water and K+ transport, seed oilbody biogenesis,\nand response to nitrate and ethylene.\n\n- **Group 2:** sulfur amino acid metabolsm, spliceosome biogenesis, \nbeta-1,3-glucan biosynthesis, response to brassinosteroids, xylem\ndevelopment, exocytosis, and calcium and sulfate transport.\n\n- **Group 3:** photosynthesis, zinc and amino acid transport, DNA replication,\nendocytosis, cell-cell junction assembly, and toxin catabolism.\n\n\n## Is there an association between OG score and OG gene length?\n\n\n@emms2015orthofinder have demonstrated a gene length bias that\ninfluences the accuracy of orthogroup detection. This is because\nshort sequences cannot produce large bit scores or low e-values, and\nlong sequences produce many hits with scores better than those for the \nbest hits of short sequences [@emms2015orthofinder]. OrthoFinder implements\na score transform that claims to eliminate such bias. But does it remove\nthe bias completely?\n\nTo answer this question, we will use homogeneity scores for the default\nOrthoFinder run (default DIAMOND mode, mcl = 1.5).\n\nFirst of all, let's calculate the mean and median gene length for \neach orthogroup.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine proteomes into a single AAStringSet object and clean gene names\nnames(brassicaceae_proteomes) <- NULL\nproteomes <- do.call(c, brassicaceae_proteomes)\nrm(brassicaceae_proteomes)\n\nnames(proteomes) <- gsub(\"\\\\\\t.*\", \"\", names(proteomes))\nnames(proteomes) <- gsub(\" .*\", \"\", names(proteomes))\nnames(proteomes) <- gsub(\"\\\\.[0-9]$\", \"\", names(proteomes))\nnames(proteomes) <- gsub(\"\\\\.[0-9]\\\\.p$\", \"\", names(proteomes))\nnames(proteomes) <- gsub(\"\\\\.t[0-9]$\", \"\", names(proteomes))\nnames(proteomes) <- gsub(\"\\\\.g$\", \"\", names(proteomes))\n\n\n# Load only orthogroups from the default OrthoFinder run\nog <- read_orthogroups(file.path(tempdir(), \"Orthogroups_default_1_5.tsv\")) %>%\n    mutate(Gene = str_replace_all(\n        Gene, c(\n            \"\\\\\\t.*\" = \"\",\n            \"\\\\.[0-9]$\" = \"\",\n            \"\\\\.[0-9]\\\\.p$\" = \"\",\n            \"\\\\.t[0-9]$\" = \"\",\n            \"\\\\.g$\" = \"\"\n        )\n    )) %>%\n    dplyr::select(Orthogroup, Gene)\n\n# Calculate mean gene lengths for each orthogroup\ngene_lengths <- data.frame(\n    Gene = names(proteomes), \n    Length = Biostrings::width(proteomes)\n)\n\nog_gene_lengths <- og %>%\n    inner_join(., gene_lengths) %>% \n    group_by(Orthogroup) %>%\n    summarise(\n        mean_length = mean(Length),\n        median_length = median(Length)\n    )\n\n\n# Add homogeneity scores to data frame of mean gene length per orthogroup\nog_length_and_scores <- og_assessment %>%\n    dplyr::filter(Mode == \"default_1_5\") %>%\n    dplyr::select(Orthogroups, Mean_H, Median_H) %>%\n    inner_join(., og_gene_lengths, by = c(\"Orthogroups\" = \"Orthogroup\"))\n```\n:::\n\n\nNow, since the number of domains in a protein correlates with its length,\nlet's also calculate the median number of domains in an orthogroup. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate median number of domains for each orthogroup\nog_domain_count <- Reduce(rbind, interpro) |>\n    dplyr::count(Gene) |>\n    inner_join(og, by = \"Gene\") |>\n    group_by(Orthogroup) |>\n    summarise(\n        median_ndomains = median(n)\n    )\n\nog_length_and_scores <- left_join(\n    og_length_and_scores, og_domain_count, by = c(\"Orthogroups\" = \"Orthogroup\")\n)\n\n# Save data\nsave(\n    og_length_and_scores,\n    file = here(\"products\", \"result_files\", \"og_length_and_scores.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nNext, we will investigate if the number of domains can be a confounder in\nassociations between the orthogroup score and gene length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore associations between the number of domains and gene length\np_length_domains <- ggplot(\n    og_length_and_scores, \n    aes(y = log2(median_ndomains + 1), x = log2(median_length + 1))\n) +\n    geom_point(alpha = 0.3) +\n    theme_bw() +\n    labs(\n        title = \"Number of domains and gene length\",\n        x = expression(Log[2] ~ \"median gene length\"),\n        y = expression(Log[2] ~ \"median number of domains\")\n    )\n\ncor_length_domains <- cor.test(\n    log2(og_length_and_scores$median_length + 1), \n    log2(og_length_and_scores$median_ndomains + 1),\n    method = \"spearman\",\n    exact = FALSE\n)\n\n# Show plot and correlation test statistics\np_length_domains\n```\n\n::: {.cell-output-display}\n![](04_orthogroup_inference_brassicaceae_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncor_length_domains\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tSpearman's rank correlation rho\n\ndata:  log2(og_length_and_scores$median_length + 1) and log2(og_length_and_scores$median_ndomains + 1)\nS = 4.7564e+11, p-value < 2.2e-16\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n      rho \n0.4165488 \n```\n:::\n:::\n\n\nThe figure and test above show that there is indeed a moderate \ncorrelation ($\\rho \\approx 0.4, P <0.001$) between gene length and \nnumber of domains. Because of that, we will use partial Spearman's correlation \nto measure the association between orthogroup scores and gene length while \ncontrolling for the number of domains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate partial Spearman's correlations\n## Without accounting for the number of domains\ncor1 <- ppcor::pcor(\n    data.frame(\n        Length = log2(og_length_and_scores$median_length + 1), \n        Score = log2(og_length_and_scores$Median_H + 1)\n    ),\n    method = \"spearman\"\n)\ncor1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$estimate\n           Length      Score\nLength  1.0000000 -0.1903208\nScore  -0.1903208  1.0000000\n\n$p.value\n              Length         Score\nLength  0.000000e+00 3.370622e-138\nScore  3.370622e-138  0.000000e+00\n\n$statistic\n          Length     Score\nLength   0.00000 -25.25673\nScore  -25.25673   0.00000\n\n$n\n[1] 16975\n\n$gp\n[1] 0\n\n$method\n[1] \"spearman\"\n```\n:::\n\n```{.r .cell-code}\n## Accounting for the number of domains\ncor2 <- ppcor::pcor.test(\n    log2(og_length_and_scores$median_length + 1), \n    log2(og_length_and_scores$Median_H + 1),\n    log2(og_length_and_scores$median_ndomains + 1),\n    method = \"spearman\"\n)\ncor2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    estimate      p.value statistic     n gp   Method\n1 0.08593287 3.417431e-29  11.23661 16975  1 spearman\n```\n:::\n:::\n\n\nThe tests show a weak correlation between orthogroup scores and gene length.\nWhen the number of domains is included as a covariate, we find no correlation\nat all, indicating that OrthoFinder's normalization score is effective.\n\nFinally, let's plot the data and add the test statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_association_length_homogeneity <- og_length_and_scores %>%\n    mutate(\n        logH = log10(Median_H + 1),\n        logLength = log10(median_length + 1)\n    ) %>%\n    ggscatter(\n        ., x = \"logLength\", y = \"logH\", alpha = 0.3,\n        color = \"black\", size = 1\n    ) +\n    annotate(\n        \"text\",\n        x = 1.71, y = 0.055, \n        label = paste(\n            \"rho\", \"==\", signif(cor1$estimate[1, 2], 2)\n        ),\n        parse = TRUE\n    ) +\n    annotate(\n        \"text\",\n        x = 1.71, y = 0.035, \n        label = paste(\n            \"rho[partial]\", \"==\", signif(cor2$estimate, 2)\n        ),\n        parse = TRUE\n    ) +\n    annotate(\n        \"text\",\n        x = 1.71, y = 0.015,\n        label = paste(\"P\", \"<\", 2.2e-16), parse = TRUE\n    ) +\n    labs(\n        title = \"Relationship between OG score and gene length\",\n        x = expression(Log[10] ~ \"median gene length\"),\n        y = expression(Log[10] ~ \"median homogeneity score\")\n    )\n\np_association_length_homogeneity\n```\n\n::: {.cell-output-display}\n![Relationship between sequence length and orthogroup scores.](04_orthogroup_inference_brassicaceae_files/figure-html/plot-og-length-h-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-08-08\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package          * version   date (UTC) lib source\n abind              1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n AnnotationDbi      1.62.0    2023-04-25 [1] Bioconductor\n ape                5.7-1     2023-03-13 [1] CRAN (R 4.3.0)\n aplot              0.1.10    2023-03-08 [1] CRAN (R 4.3.0)\n backports          1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n beeswarm           0.4.0     2021-06-01 [1] CRAN (R 4.3.0)\n Biobase            2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics       0.46.0    2023-04-25 [1] Bioconductor\n BiocParallel       1.34.0    2023-04-25 [1] Bioconductor\n Biostrings         2.68.0    2023-04-25 [1] Bioconductor\n bit                4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64              4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops             1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob               1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n broom              1.0.4     2023-03-11 [1] CRAN (R 4.3.0)\n cachem             1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n car                3.1-2     2023-03-30 [1] CRAN (R 4.3.0)\n carData            3.0-5     2022-01-06 [1] CRAN (R 4.3.0)\n cli                3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clusterProfiler  * 4.8.1     2023-05-03 [1] Bioconductor\n codetools          0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n cogeqc           * 1.4.0     2023-04-25 [1] Bioconductor\n coin               1.4-2     2021-10-08 [1] CRAN (R 4.3.0)\n colorspace         2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n commonmark         1.9.0     2023-03-17 [1] CRAN (R 4.3.0)\n cowplot            1.1.1     2020-12-30 [1] CRAN (R 4.3.0)\n crayon             1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table         1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n digest             0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n DOSE               3.26.1    2023-05-03 [1] Bioconductor\n downloader         0.4       2015-07-09 [1] CRAN (R 4.3.0)\n dplyr            * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n enrichplot       * 1.20.0    2023-04-25 [1] Bioconductor\n evaluate           0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi              1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver             2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastmap            1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n fastmatch          1.1-3     2021-07-23 [1] CRAN (R 4.3.0)\n fgsea              1.26.0    2023-04-25 [1] Bioconductor\n forcats          * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n generics           0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb       1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData   1.2.10    2023-04-28 [1] Bioconductor\n ggbeeswarm         0.7.2     2023-04-29 [1] CRAN (R 4.3.0)\n ggforce            0.4.1     2022-10-04 [1] CRAN (R 4.3.0)\n ggfun              0.0.9     2022-11-21 [1] CRAN (R 4.3.0)\n ggnewscale         0.4.8     2022-10-06 [1] CRAN (R 4.3.0)\n ggplot2          * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggplotify          0.1.0     2021-09-02 [1] CRAN (R 4.3.0)\n ggpubr           * 0.6.0     2023-02-10 [1] CRAN (R 4.3.0)\n ggraph             2.1.0     2022-10-09 [1] CRAN (R 4.3.0)\n ggrepel            0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n ggsci              3.0.0     2023-03-08 [1] CRAN (R 4.3.0)\n ggsignif           0.6.4     2022-10-13 [1] CRAN (R 4.3.0)\n ggtext             0.1.2     2022-09-16 [1] CRAN (R 4.3.0)\n ggtree             3.8.0     2023-04-25 [1] Bioconductor\n glue               1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db              3.17.0    2023-05-02 [1] Bioconductor\n GOSemSim           2.26.0    2023-04-25 [1] Bioconductor\n graphlayouts       1.0.0     2023-05-01 [1] CRAN (R 4.3.0)\n gridExtra          2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gridGraphics       0.5-1     2020-12-13 [1] CRAN (R 4.3.0)\n gridtext           0.1.5     2022-09-16 [1] CRAN (R 4.3.0)\n gson               0.1.0     2023-03-07 [1] CRAN (R 4.3.0)\n gtable             0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n HDO.db             0.99.1    2023-06-20 [1] Bioconductor\n here             * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n hms                1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmltools          0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets        1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr               1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph             1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n IRanges            2.34.0    2023-04-25 [1] Bioconductor\n jsonlite           1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST           1.40.0    2023-04-25 [1] Bioconductor\n knitr              1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling           0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice            0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval           0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n libcoin            1.0-9     2021-09-27 [1] CRAN (R 4.3.0)\n lifecycle          1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n lubridate        * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr           2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n markdown           1.6       2023-04-07 [1] CRAN (R 4.3.0)\n MASS               7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix             1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n matrixStats        1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise            2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n modeltools         0.2-23    2020-03-05 [1] CRAN (R 4.3.0)\n multcomp           1.4-25    2023-06-20 [1] CRAN (R 4.3.0)\n munsell            0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n mvtnorm            1.1-3     2021-10-08 [1] CRAN (R 4.3.0)\n nlme               3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n patchwork        * 1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar             1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig          2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr               1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n polyclip           1.10-4    2022-10-20 [1] CRAN (R 4.3.0)\n ppcor              1.1       2015-12-03 [1] CRAN (R 4.3.0)\n purrr            * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n qvalue             2.32.0    2023-04-25 [1] Bioconductor\n R6                 2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer       1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp               1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl              1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr            * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2           1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n rlang              1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown          2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rprojroot          2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite            2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstatix          * 0.7.2     2023-02-01 [1] CRAN (R 4.3.0)\n rstudioapi         0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Vectors          0.38.0    2023-04-25 [1] Bioconductor\n sandwich           3.0-2     2022-06-15 [1] CRAN (R 4.3.0)\n scales             1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n scatterpie         0.2.1     2023-06-07 [1] CRAN (R 4.3.0)\n sessioninfo        1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shadowtext         0.1.2     2022-04-22 [1] CRAN (R 4.3.0)\n stringi            1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr          * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n survival           3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n TH.data            1.1-2     2023-04-17 [1] CRAN (R 4.3.0)\n tibble           * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidygraph          1.2.3     2023-02-01 [1] CRAN (R 4.3.0)\n tidyr            * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect         1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidytree           0.4.2     2022-12-18 [1] CRAN (R 4.3.0)\n tidyverse        * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange         0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n treeio             1.24.1    2023-05-31 [1] Bioconductor\n tweenr             2.0.2     2022-09-06 [1] CRAN (R 4.3.0)\n tzdb               0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8               1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs              0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n vipor              0.4.5     2017-03-22 [1] CRAN (R 4.3.0)\n viridis            0.6.2     2021-10-13 [1] CRAN (R 4.3.0)\n viridisLite        0.4.2     2023-05-02 [1] CRAN (R 4.3.0)\n withr              2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun               0.39      2023-04-20 [1] CRAN (R 4.3.0)\n xml2               1.3.4     2023-04-27 [1] CRAN (R 4.3.0)\n XVector            0.40.0    2023-04-25 [1] Bioconductor\n yaml               2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n yulab.utils        0.0.6     2022-12-20 [1] CRAN (R 4.3.0)\n zlibbioc           1.46.0    2023-04-25 [1] Bioconductor\n zoo                1.8-12    2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "04_orthogroup_inference_brassicaceae_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}