{
  "hash": "5ea494ba86486bc123638e80b101a84f",
  "result": {
    "markdown": "---\nexecute: \n  eval: false\n  echo: true\n  warning: false\n---\n\n\n# Appendices {.unnumbered}\n\nHere, you can find other pieces of code (Bash and R scripts) that were\nused in the main chapters. These pieces of code were stored in separate files\nto make the main text (i.e., book chapters) more readable.\n\n## Creating paper figures\n\nBelow you can find the code used to create the figures in the paper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' In this document, you can find the code to combine individual plots into\n#' panels that will be used in the main text\n\n#----Load data------------------------------------------------------------------\nlibrary(here)\nlibrary(patchwork)\nlibrary(tidyverse)\nlibrary(cogeqc)\n\n# Part 0\n## A\noutput_dir <- system.file(\"extdata\", package = \"cogeqc\")\nbusco_summary <- read_busco(output_dir)\n\ndata(batch_summary)\n\n## B\nmaize_stats <- get_genome_stats(taxon = \"Zea mays\")\nmy_stats <- data.frame(\n    accession = \"my_lovely_maize\",\n    sequence_length = 2.4 * 1e9,\n    gene_count_total = 50000,\n    CC_ratio = 2\n)\n\n## C \nstats_dir <- system.file(\"extdata\", package = \"cogeqc\")\northo_stats <- read_orthofinder_stats(stats_dir)\ndata(tree)\n\n\n# Part 1\nload(here(\"products\", \"plots\", \"combined_tree_chlorophyta.rda\"))\n\n# Part 2\n## A\nload(here(\"products\", \"plots\", \"plot_homogeneity_scores_dbs.rda\")) # distros\n\n## B\nload(here(\"products\", \"plots\", \"p_distros_global.rda\")) \nload(here(\"products\", \"plots\", \"p_distros_mcl.rda\")) \nload(here(\"products\", \"plots\", \"p_distros_diamond.rda\"))\nload(here(\"products\", \"plots\", \"p_distros_by_species.rda\"))\nload(here(\"products\", \"plots\", \"p_treeplot.rda\"))\nload(here(\"products\", \"plots\", \"p_distros_groups.rda\"))\nload(here(\"products\", \"plots\", \"p_association_length_homogeneity.rda\"))\nload(here(\"products\", \"plots\", \"relationship_og_number_and_size.rda\"))\n\n# Part 3\nload(here(\"products\", \"plots\", \"synteny_scores_fabaceae.rda\"))\nload(here(\"products\", \"plots\", \"synteny_scores_species.rda\"))\n\n\n#----Combine plots and create figs----------------------------------------------\n## Figure 0: Example of figures that can be created with graphical functions\nfig0_p1 <- plot_genome_stats(ncbi_stats = maize_stats, user_stats = my_stats)\n\nfig0_p2 <- wrap_plots(\n    plot_busco(busco_summary),\n    plot_busco(batch_summary),\n    ncol = 2\n) +\n    theme(legend.position = \"bottom\")\n\nog_overlap <- plot_og_overlap(ortho_stats) +\n    scale_fill_gradient(\n        low = \"#E5F5E0\", high = \"#00441B\", name = \"Overlap size (K)\",\n        label = scales::unit_format(unit = \"\", scale = 1e-3)\n    ) +\n    theme(legend.position = \"bottom\")\n\n\nfig0_p3 <- wrap_plots(\n    plot_orthofinder_stats(\n        tree, stats_list = ortho_stats, xlim = c(-0.1, 2)\n    ),\n    og_overlap,\n    widths = c(4, 1), \n    nrow = 1\n)\n\nfig0 <- wrap_plots(\n    fig0_p1, \n    fig0_p2,\n    fig0_p3,\n    ncol = 1,\n    heights = c(2, 1, 1.5)\n) + \n    plot_annotation(tag_levels = list(\n        c(\"A\", rep(\"\", 11), \"B\", \"C\", \"D\", rep(\"\", 3), \"E\")\n    ))\n\n\n## Figure 1: BUSCO assessment\nfig1 <- combined + \n    ggtitle(\"Percentage of BUSCOs for each species\") +\n    plot_layout(guides = \"collect\", widths = c(2,3)) &\n    theme(legend.position = \"bottom\") &\n    ggplot2::scale_fill_manual(labels = c(\n        \"Complete & SC\", \"Complete & duplicate\", \"Fragmented\", \"Missing\"\n    ),\n    values = c(\n        \"#32709a\", \"#59AAE1\", \"darkgoldenrod2\", \"#db5850\"\n    )) \n\n\n## Figure 2: Orthogroup assessment\np_distros_global <- p_distros_global +\n    scale_x_discrete(\n        labels = c(\n            \"default_1\" = \"Default, 1\",\n            \"default_1_5\" = \"Default, 1.5\",\n            \"default_2\" = \"Default, 2\",\n            \"default_3\" = \"Default, 3\",\n            \"ultra_1\" = \"Ultra, 1\",\n            \"ultra_1_5\" = \"Ultra, 1.5\",\n            \"ultra_2\" = \"Ultra, 2\",\n            \"ultra_3\" = \"Ultra, 3\"\n        )\n    )\n\np_distros_diamond <- p_distros_diamond + \n    ggtitle(\"Effect of DIAMOND mode on orthogroup inference\")\n\n\np_association_length_homogeneity <- p_association_length_homogeneity + \n    ggtitle(\"Relationship between OG homogeneity and gene length\")\n\n\npercentage_bars <- percentage_plot + scale_y_discrete(\n    labels = c(\n        \"default_1\" = \"Default, 1\",\n        \"default_1_5\" = \"Default, 1.5\",\n        \"default_2\" = \"Default, 2\",\n        \"default_3\" = \"Default, 3\",\n        \"ultra_1\" = \"Ultra, 1\",\n        \"ultra_1_5\" = \"Ultra, 1.5\",\n        \"ultra_2\" = \"Ultra, 2\",\n        \"ultra_3\" = \"Ultra, 3\"\n    )\n) +\n    ggpubr::theme_pubr()\n\n\nfig2 <- patchwork::wrap_plots(\n    wrap_plots(distros, p_distros_global, nrow = 1), # row 1\n    p_distros_by_species + \n        theme(axis.text.x = element_text(angle = 60, vjust = 0.5)), # row 2\n    wrap_plots(p_distros_mcl, p_distros_diamond, nrow = 1), # row 3\n    percentage_bars, # row 4\n    ncol = 1\n) + \n    plot_annotation(tag_levels = \"A\")\n\n## Figure 3: sequence and score relationship + functional analysis of OG clusters\n### Change font size of tip labels\nptree <- p_treeplot\nptree[[1]]$layers[[6]]$aes_params$size <- 3.5\nptree[[2]]$layers[[6]]$aes_params$size <- 3.5\nptree[[3]]$layers[[6]]$aes_params$size <- 3.5\nptree[[2]]$data$label <- gsub(\" \\\\(.*\", \"\", ptree[[2]]$data$label)\nptree[[2]]$data$label <- gsub(\n    \"signaling pathway\", \"signaling\", ptree[[2]]$data$label\n)\n\nupper <- wrap_plots(p_association_length_homogeneity, p_distros_groups, widths = c(1, 1.5))\nbottom <- ptree + theme(plot.margin = margin(0, 0, 0, 0, \"pt\"))\n\nfig3 <- wrap_plots(upper, plot_spacer(), heights = c(1, 2)) +\n    inset_element(bottom, 0, 0, 1, 1, align_to = \"full\") +\n    plot_annotation(tag_levels = \"A\")\n\n\n## Figure 4: synteny\nfig4 <- wrap_plots(\n    synteny_scores_fabaceae, \n    synteny_scores_species + theme(legend.position = \"bottom\"),\n    ncol = 1, heights = c(1, 3)\n) +\n    plot_annotation(tag_levels = \"A\")\n\n\n#----Save plots in figs/ -------------------------------------------------------\n## Figure 0\nggsave(\n    fig0, \n    filename = here(\"products\", \"figs\", \"figure_0_graphical_functions.png\"),\n    width = 18, height = 12, dpi = 400\n)\n\nggsave(\n    fig0, \n    filename = here(\"products\", \"figs\", \"figure_0_graphical_functions.pdf\"),\n    width = 19, height = 12\n)\n\n\n## Figure 1\nggsave(\n    fig1,\n    filename = here(\"products\", \"figs\", \"figure_1_busco_assessment.png\"),\n    width = 13, height = 8, dpi = 600\n)\n\nggsave(\n    fig1,\n    filename = here(\"products\", \"figs\", \"figure_1_busco_assessment.pdf\"),\n    width = 13, height = 8\n)\n\n## Figure 2\nggsave(\n    fig2,\n    filename = here(\"products\", \"figs\", \"figure_2_homogeneity_assessment.png\"),\n    width = 17, height = 18, dpi = 300\n)\n\nggsave(\n    fig2,\n    filename = here(\"products\", \"figs\", \"figure_2_homogeneity_assessment.pdf\"),\n    width = 17, height = 18\n)\n\n# Figure 3\nggsave(\n    fig3, \n    filename = here(\"products\", \"figs\", \"figure_3_ogs_brassicaceae.png\"),\n    width = 23, height = 12, dpi = 300\n)\n\nggsave(\n    fig3, \n    filename = here(\"products\", \"figs\", \"figure_3_ogs_brassicaceae.pdf\"),\n    width = 23, height = 12\n)\n\n# Figure 4\nggsave(\n    fig4, \n    filename = here(\"products\", \"figs\", \"figure_4_synteny_assessment.png\"),\n    width = 8, height = 10, dpi = 300\n)\n\nggsave(\n    fig4, \n    filename = here(\"products\", \"figs\", \"figure_4_synteny_assessment.pdf\"),\n    width = 8, height = 10\n)\n```\n:::\n\n\n## Utility functions\n\nBelow you can find the source code for some helper functions/wrappers \nthat are used in the main chapters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_ogs_uniprot <- function(proteins = NULL) {\n    \n    ogs <- lapply(proteins, function(x) {\n        \n        url <- paste0(\"https://www.ebi.ac.uk/proteins/api/proteins/\", x)\n        request <- httr::GET(url)\n        annot <- httr::content(request, type = \"application/json\", \n                               as = \"parsed\", encoding = \"UTF-8\")\n        dbref <- lapply(annot$dbReferences, as.data.frame)\n        names(dbref) <- vapply(dbref, function(x) return(x$type), character(1))\n        \n        orthodb <- NA\n        eggnog <- NA\n        inparanoid <- NA\n        phylomedb <- NA\n        hogenom <- NA\n        if(\"eggNOG\" %in% names(dbref)) {\n            eggnog <- dbref$eggNOG$id\n        }\n        if(\"OrthoDB\" %in% names(dbref)) {\n            orthodb <- dbref$OrthoDB$id\n        }\n        if(\"InParanoid\" %in% names(dbref)) {\n            inparanoid <- dbref$InParanoid$id\n        }\n        if(\"PhylomeDB\" %in% names(dbref)) {\n            phylomedb <- dbref$PhylomeDB$id\n        }\n        if(\"HOGENOM\" %in% names(dbref)) {\n            hogenom <- dbref$HOGENOM$id\n        }\n        if(!\"Araport\" %in% names(dbref)) {\n            df <- NULL\n        } else {\n            df <- data.frame(\n                Gene = dbref$Araport$id,\n                OrthoDB = orthodb,\n                eggNOG = eggnog,\n                OrthoDB = orthodb,\n                InParanoid = inparanoid,\n                PhylomeDB = phylomedb,\n                HOGENOM = hogenom\n            )\n        }\n        return(df)\n    })\n    og_df <- Reduce(rbind, ogs)\n    return(og_df)\n}\n\n\ncompare <- function(data, form, ref = NULL) {\n    # Wilcoxon test - greater and less alternatives\n    wilcoxtest_greater <- tibble::as_tibble(data) %>%\n        rstatix::wilcox_test(\n            formula(form), p.adjust.method = \"BH\", ref.group = ref,\n            alternative = \"greater\"\n        )\n    pg <- ifelse(\"p.adj\" %in% names(wilcoxtest_greater), \"p.adj\", \"p\")\n    wilcoxtest_greater <- wilcoxtest_greater %>% dplyr::select(\n            group1, group2, n1, n2, padj_greater = all_of(pg)\n        )\n    \n    wilcoxtest_less <- tibble::as_tibble(data) %>%\n        rstatix::wilcox_test(\n            formula(form), p.adjust.method = \"BH\", ref.group = ref,\n            alternative = \"less\"\n        )\n    pl <- ifelse(\"p.adj\" %in% names(wilcoxtest_less), \"p.adj\", \"p\")\n    wilcoxtest_less <- wilcoxtest_less %>% dplyr::select(\n        group1, group2, n1, n2, padj_less = all_of(pl)\n    )\n    \n    wilcox_summary <- dplyr::inner_join(wilcoxtest_greater, wilcoxtest_less) %>%\n        dplyr::mutate(padj_interpretation = dplyr::case_when(\n            padj_less < 0.05 ~ \"less\",\n            padj_greater < 0.05 ~ \"greater\",\n            TRUE ~ \"ns\"\n        ))\n    \n    # Effect sizes for Wilcoxon test - greater and less alternatives\n    \n    effsize <- tibble::as_tibble(data) %>%\n        rstatix::wilcox_effsize(\n            formula(form), ref.group = ref,\n        ) %>%\n        dplyr::select(\n            group1, group2, effsize, magnitude\n        )\n    \n    \n    result <- as.data.frame(inner_join(wilcox_summary, effsize))\n        \n    return(result)\n}\n\n\nfilter_comparison <- function(compare_output) {\n    \n    filtered_df <- compare_output |>\n        dplyr::filter(padj_interpretation != \"ns\") |>\n        mutate(padj = case_when(\n            padj_interpretation == \"greater\" ~ padj_greater,\n            padj_interpretation == \"less\" ~ padj_less\n        )) |>\n        dplyr::select(group1, group2, n1, n2, padj, effsize, magnitude)\n    \n    return(filtered_df)\n}\n```\n:::\n\n\n\n## Bash code\n\nBelow, you can find the Bash code I used to run OrthoFinder.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n\n# Define paths\nworkdir='/home/faalm/projects/cogeqc_benchmark'\noutdir='/home/faalm/projects/cogeqc_benchmark/products/result_files'\n\n# Run OrthoFinder - default DIAMOND\northofinder -f \"$workdir/data\" -S diamond -I 1.5 -o \"$outdir/default_1_5\" -og\northofinder -f \"$workdir/data\" -S diamond -I 2 -o \"$outdir/default_2\" -og\northofinder -f \"$workdir/data\" -S diamond -I 3 -o \"$outdir/default_3\" -og\northofinder -f \"$workdir/data\" -S diamond -I 1 -o \"$outdir/default_1\" -og\n\n# Run OrthoFinder - ultrasensitive DIAMOND\northofinder -f \"$workdir/data\" -S diamond_ultra_sens -I 1.5 -t 8 -o \"$outdir/ultra_1_5\" -og\northofinder -f \"$workdir/data\" -S diamond_ultra_sens -I 2 -t 8 -o \"$outdir/ultra_2\" -og\northofinder -f \"$workdir/data\" -S diamond_ultra_sens -I 3 -t 8 -o \"$outdir/ultra_3\" -og\northofinder -f \"$workdir/data\" -S diamond_ultra_sens -I 1 -t 8 -o \"$outdir/ultra_1\" -og\n```\n:::\n\n\n## Session information\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-08-04\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.3.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21    2023-03-26 [1] CRAN (R 4.3.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}